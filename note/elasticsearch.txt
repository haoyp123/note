elasticsearch
	kibana可视化插件
	es的应用场景
		查询 搜索 分布式日志收集系统
	
	es的存储结构
		es是文档存储，是面向文档型数据库，一条数据在这里就是一个文档
		用json作为文档序列化的格式。
		{
		"name":"jack",
		"age":18
		}
		关系型数据库 一般是 库  表  行 列
		es 是 索引 类型（类似表） 文档（一行数据） 字段（）

环境搭建
    es 安装需要安装jdk，es是java写的
    docker 安装es参考的两个网站
    https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
    https://www.elastic.co/guide/en/kibana/current/docker.html
    安装以后，要用docker start elasticsearch
    注意：es非常占用内存，内存默认1G。
    9300是内部的一个端口号
    9200是外部通讯的一个端口号

基本操作
    创建文档之前需要创建索引
    创建索引 PUT /indexName  PUT /test  支持小写的put get
    获取索引 GET /indexName
    put请求的时候需要传入主键id  post请求的时候 如果不传主键id es会自动生成一个。
    创建文档
    put /索引/类型/id
    创建文档 /索引/类型/id
    id相当于主键 不能重复
    put /test/user/1
    {
      "name":"张三",
      "age":"18",
      "sex":"男"
    }
    获取文档
    get  /test/user/1
    {
      "_index" : "test",
      "_type" : "user",
      "_id" : "1",
      "_version" : 1,
      "_seq_no" : 0,
      "_primary_term" : 1,
      "found" : true,
      "_source" : {
        "name" : "张三",
        "age" : "18",
        "sex" : "男"
      }
    }
    修改文档信息
    put /test/user/1
    {
      "name":"李四",
      "age":"18",
      "sex":"男"
    }
    修改文档后 version会更新+1
es的版本控制
    cas乐观锁机制
    乐观锁和悲观锁
       悲观锁：假定会引起数据冲突，在修改数据前，先进行加锁。
       乐观锁：假定不会引起数据冲突，只有在提交的时候才检测，如果引起冲突交给用户解决。
       更新数据的同时也更新version。
spring boot 整合 es
    elasticsearch从7开始不推荐使用TransportClient客户端访问，所以yml配置使用spring.elasticsearch.rest.uris
    spring:
      elasticsearch:
        rest:
          uris: http://www.52diary.cn:9200
    通过springboot添加文档信息和操作jpa一样调用save方法
        {
          "_index" : "test",
          "_type" : "user",
          "_id" : "2",
          "_version" : 1,
          "_seq_no" : 2,
          "_primary_term" : 1,
          "found" : true,
          "_source" : {
            "_class" : "com.study.elasticsearch.esdemo.entity.UserEntity",
            "id" : "2",
            "name" : "jack",
            "age" : 12,
            "sex" : "女"
          }
        }
        添加后的节点有个_class这个地址是文档的java bean

es9200和9300的区别
    9300是做集群用的，集群内部进行通讯。
    9200是与外部通讯的端口号。

倒排索引
    为什么倒排索引比数据库的查询效率快。
    倒排索引会对内容的关键字进行分词
    利用一个单词表，
    单词序号  单词内容       倒排文档列表（出现关键单词的文档）
        1        中国           1，2，3，4，5
    如上图所示，中国这个关键字在文档12345中都存在，用户搜索中国，
    把12345文档都返回即可。

   es分词器 默认分词器是把每个中文作为关键词


es高级查询
    查询类型下的所有文档信息
    get /test/user/_search
    查询多个主键的信息
    get /test/user/_mget
    {
      "ids":[1,2]
    }
    查询年龄是18岁的
    get /test/user/_search?age=18

    dsl查询
    post请求传json格式
    term查询是精确匹配，不做分词
    {
        "query":{
            "term":{
                "name":"jack"
            }
        }
    }
    match查询是模糊查询做分词
    {
        "query":{
            "match":{
                "name":"李"
            }
        }
    }
    match 是对该字段进行分词查询
     {
            "query":{
                "match":{
                    "name":"你好中国"
                }
            }
     }
     会将你好和中国两个词分开作为关键字进行查询
es 安装分词
    下载 ik smart
    解压到plugins 文件夹
    docker  cp  Linux 文件    容器:/usr/...  拷贝文件到虚拟机客户端