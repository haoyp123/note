mybatis 

mybatis和hibernate的区别

原理
	dom解析xml
	创建bean交有spring管理
	读取配置文件
	
sql注入
	#{}和${}的区别
	什么是sql注入
	select * from user where user_id= '123';
	select * from user where user_id=''or 1=1;
	通过拼接1=1恒等查询。
解决sql注入的方式
在传统jdbc中，
使用？ 先编译，在传参，将单引号转义。

在mybatis中，${} 表示自己拼接sql，这样会形成sql注入
#{}会进行预编译，可以防止sql注入

---------
为什么需要使用 mybatis
    spring jdbc 项目复杂时候出现问题：连接管理、sql语句硬编码  业务代码与sql耦合度高。
    资源管理是：dataSource
    对于方法的封装是：jdbcTemplate
    对结果集的处理：rowMapper

    没有解决硬编码的问题、参数只能按顺寻传入、实现了结果集到java对象的映射。没提供实体类到数据库的映射。

    ORM object relational mapping 对象关系映射。

    hibernate 自动的

    mybatis 半自动、灵活、代码和sql语句不耦合 支持动态sql、mybatis的缓存、sql片段解决重复问题。


    mybatis比较重要的对象
        sqlSessionFactoryBuilder----->创建工程类（局部生命周期）
        sqlSessionFactory----->创建会话（需要一直存在，单例）
        sqlSession 操作数据库的。方法执行完就销毁了。
        Mapper 通过sqlSession的getMapper()方法操作。存在一次事务的方法中。

    mybatis核心配置
        mybatis的配置文件一般分为两部分：
            一部分是mybatis-configuration
                mybatis的全局配置。比如说 mybatis的typeAlias、cache、数据库连接等信息.
                标签
                configuration---根节点。解析完对应的是configuration.java的对象。
                一级标签 settings
                type Alisa 简化拼写。
                    TypeHandlerRegistry()-->作用处理了java实体类和数据库的映射关系

                ObjectFactory
                    把数据库记录映射成java对象。不知道对象有什么属性以及类型。通过反射创建对象。对象工厂创建对象。
                    defaultObjectFactory 通过create方法生成java对象。


            另外一部分是Mapper。

                insert/update/delete/select

                动态sql（if/choice(when otherwise trim) for each）

                N+1问题？如何解决
                    mybatis中，关联查询。mybatis中关联查询有两种情况一种是关联查询，一种是关联结果。
                        关联查询的时候会出现N+1次问题。
                        resultMap 和resultType的区别
                        statement 和prepareStatement的区别 ${}和#{}
                            prepareStatement 预编译可以防止sql注入
                            什么是sql注入
                            select * from t where id=${} 比如入参为100 or 1=1 恒等
                            select * from t where id=#{} 比如入参为100 or 1=1 会将其编译成字符
                        association 和collection的区别

        mybatis的 执行流程
            sqlSessionFactoryBuilder
            sqlSessionFactory
            sqlSession
            executor
            statement handler

        mybatis的架构
            接口层

            核心层
                解析配置文件
                创建prepareStatement
                参数处理
                执行sql等操作
                结果映射
            基础层
                日志、缓存、事务等
        mybatis的缓存
            一级缓存作用域是sql session.
            源码分析：sql session中有个执行器 executor --基本执行器有个base executor
            基本执行器中有PerpetualCache，一级缓存。
            在一个会话中，开启缓存后，会发送一次sql，不会重复查询，如果更新或者删除

            二级缓存：namespace级，存在caching executor （同一个mapper的同一个方法）
            在全局配置中开启、在自己的mapper中配置 二级缓存解决了跨会话数据共享的问题。

mybatis 源码分析
    build-->parseConfiguration()将文件解析为XML文件。
    解析mapped statement
    buildStatementFromContext(context.evalNodes("select|insert|update|delete"));
    parseStatementNode
    设置代理类：mapperRegister.addMapper
        knownMappers.put(type, new MapperProxyFactory<>(type));
        key是接口类型 value 是工厂类。

    openSession()方法
        创建事务工厂、创建事务
        创建执行器。configuration.newExecutor()创建执行器
        执行器有三种 简单 批量 重用
            newExecutor()这里要是开启了二级缓存，则采用caching executor 进行包装。装饰器模式
    base executor 是一个抽象类 实现了接口executor
        simple executor 、reuse executor 、batch executor
        都继承了base executor 里边定义了抽象方法 update 等抽象方法。
        具体实现在子类。这种设计模式是模板方法。

    mapper 对象
        getMapper()方法 获取MapperProxyFactory 代理工厂类
            用代理工厂执行sql session
        mybatis动态代理没有实现类？
            不需要实现类，只需要把sql和代理对象结合起来即可。

        如何执行sql的。invoke方法执行。


mybatis的插件
    Executor  parameterHandler ResultSetHandler statementHandler
    interceptorChain.pluginAll()方法关注