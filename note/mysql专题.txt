docker 安装mysql
    2059 - authentication plugin 'caching_sha2_password'的解决方法。
    这个是由于8以上版本得加密方式导致的。
    show variables like 'default_authentication_plugin'; 查看加密方式
    select host,user,plugin from mysql.user; 查看用户加密方式
    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
    把加密方式改为mysql_native_password 另外不仅要搞localhost的也要改%的

mysql 架构和内部模块
    client连接server server 用线程池进行处理的。
    8.0开始 mysql没有内置缓存了。

    一个select的执行流程
        连接到server
        查询缓存（8.0已经没有了）
        解析器---功能
        词法分析
           把sql拆分成单词，查看每个单词代表什么
        语法分析
            根据sql语法规则，判断你的sql是否正确。
        预处理器--功能
            select* from t1;
            进行语义分析。对sql进行进一步解析，保证sql语义正确。若t1表不存在报错，是此时做处理的。
        优化器--功能
            词法分析语法分析和预处理都正确的时候，优化器会对sql进行优化，选取一个它认为最优的执行路径。
            例如，多表关联查询先查询哪个表，如一个表有多个所引，具体使用哪个索引，另外对于一些恒等式1=1或者1<>1这种也会优化。
            判断规则：基于开销的优化器，服务端的开销。选择开销最小的执行路径。
            不是所有的sql都会进行优化，要注意sql写法。

        执行计划--功能
            把解析树进行执行。
            innodb 引擎———— 事务安全的，ACID特性，支持行级别锁定，有聚集索引。
            myisam 引擎———— 只有表级别锁，一般只用于读。
            EXPLAIN format=JSON SELECT * from user_innodb;
            存储引擎可以被修改，因为不同存储引擎提供的接口是一样的。
        执行器--功能
            执行器拿到执行计划，访问存储引擎，返回前端。

        数据过滤，计算是在server层，索引是在存储层。

    一个update/delete/insert的执行过程
        也需要查询加载存储引擎内存（不会只加载一点数据，会预加载，按页加载，innodb一页默认是16k，从磁盘加载到内存一次16k）
        从存储引擎内存返回到server内存（操作都是在server层实现）

        每次请求都读取磁盘的话 磁盘IO大，效率低，所以在存储引擎开辟了一块缓存区buffer pool（提升读写性能关键因素）
        读取或者更新都会先写入buffer pool 在写入磁盘。
        buffer pool 写入redo log 解决内存数据崩溃的问题。
        redo log
        innodb里边存储引擎中
        问题 为什么要先写入 buffer pool 在更新到磁盘呢？
        磁盘IO 分为两种 一种是随机IO ，一种是顺序IO，随机IO需要选址，所以慢，顺序IO不用选址，追加形式，在某些时候
        顺序IO速度甚至比内存快。
        undo log 事务日志
        增删改会记录到undo log 用于回滚。

        redo log是两段式提交为什么？

        bin log
        逻辑日志，记录的是操作语句。
        主从复制
        数据恢复