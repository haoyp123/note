docker 安装mysql
    2059 - authentication plugin 'caching_sha2_password'的解决方法。
    这个是由于8以上版本得加密方式导致的。
    show variables like 'default_authentication_plugin'; 查看加密方式
    select host,user,plugin from mysql.user; 查看用户加密方式
    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
    把加密方式改为mysql_native_password 另外不仅要搞localhost的也要改%的

mysql 架构和内部模块
    client连接server server 用线程池进行处理的。
    8.0开始 mysql没有内置缓存了。

    一个select的执行流程
        连接到server
        查询缓存（8.0已经没有了）
        解析器---功能
        词法分析
           把sql拆分成单词，查看每个单词代表什么
        语法分析
            根据sql语法规则，判断你的sql是否正确。
        预处理器--功能
            select* from t1;
            进行语义分析。对sql进行进一步解析，保证sql语义正确。若t1表不存在报错，是此时做处理的。
        优化器--功能
            词法分析语法分析和预处理都正确的时候，优化器会对sql进行优化，选取一个它认为最优的执行路径。
            例如，多表关联查询先查询哪个表，如一个表有多个所引，具体使用哪个索引，另外对于一些恒等式1=1或者1<>1这种也会优化。
            判断规则：基于开销的优化器，服务端的开销。选择开销最小的执行路径。
            不是所有的sql都会进行优化，要注意sql写法。

        执行计划--功能
            把解析树进行执行。
            innodb 引擎———— 事务安全的，ACID特性，支持行级别锁定，有聚集索引。
            myisam 引擎———— 只有表级别锁，一般只用于读。
            EXPLAIN format=JSON SELECT * from user_innodb;
            存储引擎可以被修改，因为不同存储引擎提供的接口是一样的。
        执行器--功能
            执行器拿到执行计划，访问存储引擎，返回前端。

        数据过滤，计算是在server层，索引是在存储层。

    一个update/delete/insert的执行过程
        也需要查询加载存储引擎内存（不会只加载一点数据，会预加载，按页加载，innodb一页默认是16k，从磁盘加载到内存一次16k）
        从存储引擎内存返回到server内存（操作都是在server层实现）

        每次请求都读取磁盘的话 磁盘IO大，效率低，所以在存储引擎开辟了一块缓存区buffer pool（提升读写性能关键因素）
        读取或者更新都会先写入buffer pool 在写入磁盘。
        buffer pool 写入redo log 解决内存数据崩溃的问题。
        redo log 实现崩溃恢复
        innodb里边存储引擎中
        问题 为什么要先写入 buffer pool 在更新到磁盘呢？
        磁盘IO 分为两种 一种是随机IO ，一种是顺序IO，随机IO需要选址，所以慢，顺序IO不用选址，追加形式，在某些时候
        顺序IO速度甚至比内存快。
        undo log 事务日志
        增删改会记录到undo log 用于回滚。

        redo log是两段式提交为什么？

        bin log
        逻辑日志，记录的是操作语句。
        主从复制
        数据恢复

索引
    索引是数据库管理系统中的一个排序的数据结构。 使用索引避免全表扫描。
    索引存储的是 索引---数据对应的内存地址
    主键、唯一、全文、普通
索引 的存储结构

    演变
       二叉树---》  如果数据是排序好的，只有一个子树。
       平衡二叉树---》 左右子树的深度差不超过1，每个节点下最多只能有两个节点，树的深度过深。
       B树  特点是 N 和度(N+1) 两个两个键值 对应三个分叉。
       B+树 特点是 N 和度(N) 两个键值对应两个分叉。


    索引应该存储什么数据呢
        结构是树，节点是node，node应该存储什么信息？
        索引、数据在磁盘的地址、 左子节点和右子节点的引用。
        （B+树的情况下，内节点不存地址，地址都存放在叶子节点。叶子节点有个双向指针。
        只存储键值，节点存储数据更多，分叉更多。
        所以，基于索引拿到数据能力更强，不需要进行树的遍历，只需要便利指针即可。）

        innodb把数据加载到磁盘的最小单位是page，默认大小是16k，
        node节点的大小也设计是16k。node 16384个字节。
        一个节点只存储一个数据的话，不能完全利用node空间，而且每次加载需要占用大量IO。
        解决方式就是一个node 尽量多的存储数据。
        KEY的数量由什么决定呢？key的大小决定，尽量少用uuid 用些自增数列。
        用16384个字节/键值大小 +1 得到度数的。

        InnoDb
            索引文件.idb索引
            innodb只有两种索引:聚集索引和其他索引。
            聚集索引：索引的键值逻辑顺序于数据行的物理顺序是一致的。聚集索引的叶子存放的是完整数据。
            其他索引的叶子节点：主键索引。
            所以使用其他索引的时候会先检索自己的B+树，然后在检索主键的B+树。 这个过程叫做回表。


        主键索引是有序的 就按顺序插入，如果是无序的，会进行多次的数据合并和分裂。
        页不是一个页一个页申请的，是按64个页进行申请的，按区申请。进行调整比较少。

    行溢出问题
        一个page放不下，会把超出页大小的放到out-page中。

    索引一定会加快查找效率吗？
        否
        引入一个公式：离散度=（不重复的数据）/个数。
         比如10个数据，性别和手机号码 2/10=0.2  10/10 =1 性别的离散度是0.2 手机的离散度是10.
         在性别上建立索引不如全表扫描的快。

    联合索引的最左匹配原则。 必须以索引的第一个字段开始，不能跳过。必须使用最左边的索引
        比如联合索引 身份证号+考号。
        优先以字段顺序进行排序。

    覆盖索引 是索引的使用情况，查询的列是索引。

索引失效
    对索引进行表达式
    隐式转换
    like %
    负向查询<>


mysql的事务和锁
    什么是事务？ 事务是执行管理系统的一个逻辑单位，由一个有限的数据库操作序列构成。
    事务特性ACID 原子性 一致性 隔离性 持久性
    原子性：要么都成功要么都失败。
    一致性：事务提交前的状态和事务提交后的状态是一致的。
    隔离性：多个事务之间相互不影响。
    持久性：只要事务提交了对事务修改是永久的。

    没有提交的事务在buff pool 中 commit之后才会刷脏数据。
    查询时候开启事务a，开启事务b，更新事务a查询的数据，b事务不提交，重新读取a事务
    一个事务读取了其他事务没有提交的事务的数据-----》脏读。

    查询时候开启事务a，开启事务b，更新事务a查询的数据，b事务已提交，重新读取a事务
    一个事务前后两次读取数据不一样，是因为读取了其他事务已经提交的数据。----》不可重读。（包括修改和删除）

    只有读取新增数据造成的问题才是幻读。（只有新增的情况）

    事务隔离级别就是为解决 数据一致性问题（脏读、不可重读和幻读。）

mysql的事务隔离级别（通过lbcc 锁， mvcc 多版本并发控制 两种方式实现）
    读未提交 隔离级别最低，什么问题都不能解决
    读已提交 能解决脏读问题
    可重复读 能解决不可重复读问题 不能解决幻读问题
    序列化   什么都能解决。
    显示隔离级别:show VARIABLES like '%tx_isolation%';
    设置隔离级别：SET Transaction Isolation Level Read UNCOMMITTED;


    如何保证读一致性？
        mysql用mvcc 多版本并发控制 multi version concurrency control
        mvcc原理--就是一个快照机制。
        mvcc依赖两个隐藏列 DB_TRX_ID(事务ID) DB_ROLL_PRT(事务回滚指针 指向undo log链)
        创建事务的时候会在当前事务添加事务ID
        对于事务ID比当前事务大，或者在当前事务创建之前，没有提交的事务，是不能修改的。
        更新的情况下，旧的数据放在undo log日志中事务回滚的版本是当前事务，新数据的创建版本是当前事务版本。

        mvcc的理念是显示当前事务提交，或者本事务中的修改。

        read view 有哪些事务存在但是没有commit的时候。（列表，当时事务活跃的id）
        查询数据的时候在read view中的话，现在的版本是看不到的，根据 DB_ROLL_PRT 指针找到一个
        undo log对应的旧的版本，直到不在read view中。

    mvcc 的优势
        读写不冲突效率高。
        实现读一致性，不会感染别的数据。要读到最新的数据需要加锁。

    普通查询的时候使用的是mvcc 涉及 update/delete/insert 用的是锁
    rr 和rc 都有mvcc为什么rc不能解决幻读的问题。 rr是开启事务时候的快照。
    是因为建立快照的时机不一样。rr是第一次查询的时候建立快照 rc是当前查询的时候。

mysql 锁的问题
    共享锁：多个事务对同一个数据能共享一把锁，但是只能读不能修改。lock in share mode
    会话1 获取锁 seletc * from  t  ..  lock in share mode
    会话2 获取锁 select * from  t  ..  lock in share mode
    会话3 获取锁 update  t set .. (使用了写锁，排他锁。)
    会话3会一直阻塞 ，直到会话1 和会话2 提交完毕。

    排他锁
        insert / update / delete 会自动加排他锁。
        手动加排他锁： for update

    意向锁
        加表锁得时候，需要没有锁锁定数据。
        如果有事务锁定任何一行，就必须给这个表加个标志，这个标志就是意向锁。
        意向锁 是数据库自己加的，不会与其他锁冲突。

    行锁到底锁住了什么？
        mysql锁 锁住的是索引。 主键索引又叫聚集索引，前文已经说明，
        对二级索引加锁，其实也是对主键索引加锁。
        一张表有没有可能没有索引？不会出现这个问题，会自动添加一个索引。

        t1:id name 都无索引。
            事务1 id1 加锁 事务2 id3加锁。
            出现了锁表的现象。没有索引进行了全表扫描，所以都锁住了。

        t2:id 主键索引（聚集索引），name无索引
             事务1 id1 加锁 事务2 id4加锁。 两个都能同时加锁。

        t3:id主键索引（聚集索引），name唯一索引

        锁的算法：
            记录锁：精准命中索引
            间隙锁：区域在两个索引之间。会阻塞插入。
                间隙锁最大的目的就是阻塞插入。
                BEGIN;
                SELECT * FROM t2 where id=5 for update 若id=5的数据存在，则事务2会阻塞。
                若id=5的事务不存在，则事务2不会阻塞，在事务2中插入的时候会阻塞。
            临键锁：包含左闭右开的区间。
                锁住一个范围的时候
                SELECT * FROM t2 where id>5 and id<9
                跨多个区间 最后临键区间 是最后一个key的下一个临键区间。


mysql 优化
    垂直分库:分为不同中心
    读写分离 、分库分表  从连接角度优化。

    sql语句的角度优化
        找出慢查询sql
        show VARIABLES like '%slow_query%'
        show VARIABLES like '%long_query%'

    explain 详解
        id select_type type rows filtered extra
        多表关联查询的时候是从内表先查，id序号大的先查询。（原则：先大后小，先上后下）
        小表驱动原则：先查询数据量小的表。如b100，a100000条的时候先筛选出b表数据。
        select_type
         simple 简单查询 primary 主查询 sub query 内查询
        type 访问类型
          const 用唯一索引、主键查询 查询精准，只有一行数据。
          eq_ref
          ref 其他索引
          range 对索引进行范围查询
          index 查所有索引 比如查询索引
          all 是没有索引
        rows 预估扫描行 不准确

        filtered
            存储引擎层拿到数据 返回给server层 返回到server 然后在返回给客户端剩余多少。比例越高越好

        extra
            using index 查询的是索引 不需要回表的时候是index。
            using where 存储引擎层不全是客户端需要的，需要到服务层过滤数据
            using index condition 查询返回到server层，但是代价太大了，又返回给存储引擎层进行查询，索引下推。
            using filesort