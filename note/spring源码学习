OOP 面向对象编程 封装继承多态。用程序描述生活中的事务。
BOP 面向Bean编程，java是面向对象的语言，是用一个一个的bean来体现的的。
解放了程序员的双手，提出了一个新的理念。spring就是一切都从bean开始。

AOP 面向切面编程， 找出有规律的代码，抽取出来，运行时在运行。面向切面就是面向规则，将规则抽出来。

IOC 将对象的控制权限交给spring进行管理。

DI spring不仅能胡藏剑对象，还能保存对象和对象的关系，实现自动赋值。主要有三种方法，一种是属性，一种是构造函数

AOP
    aspect(切面) 通常是一个类，里边定义了切入点和通知。
    jointPoint连接点：程序执行过程中明确定义的点， 一般是方法的调用。
    advice通知：增强处理。
    pointCut切点：带有通知的连接点。写切入点表达式的。

spring 简化了开发
    基于pojo最小侵入式，减少依赖
    通过依赖注入和面向接口编程解耦
    通过面向切面和惯性进行声明式编程
    通过面向切面和模板方法减少样板式代码

面向bean编程
    之前是new bean 现在交由spring进行创建和管理。
    DI 把声明好的变量，进行赋值注入。
    AOP具有同一规律的类的方法放到一起放到一个面操作维护。

一个spring基本执行流程
    一般来说分为三个阶段
        配置参数
            配置web.xml  init-param annotation
        初始化
            读取配置、扫包初始化对象、交由IOC管理 依赖注入 MVC(会将交予handlerMapping管理)
        运行
            调用doGet doPost 等方法 获取用户输入的地址 反射调用、返回前端。
    手写一个servlet的步骤：
        加载配置文件、获取配置信息进行扫包处理、初始化对象交由springIOC进行管理、
        进行依赖注入、生成handlerMapping映射器（请求和方法进行一个映射）、
        doDispatcher 进行请求转发