一、 服务注册和发现
    常见的注册中心有zookeeper eureka  concul
    注册中心有两种：
        中心化和去中心化（相互同步，没有主从）
    eureka
    http://127.0.0.1:8761/eureka/apps 应用信息
    随机端口 server.port: 0 随机端口容易出问题。
    @value("${server.port}")获取得随机端口是0
    想要获取正确的端口如下：
    public TestFeignController(Environment environment) {
        this.environment = environment;
    }
    String getPort(){
        return environment.getProperty("local.server.port");
    }
    外部化配置有时候不靠谱。

    出现的问题：每个服务注册到注册中心都会序列化为一个application，规模越大，客户端容易full gc。

    registry-fetch-interval-seconds: 30
    定时刷新默认30秒读取注册中心数据，对内存也有一定压力。

    使用zookeeper作为注册中心
        对节点进行监听的方式进行更新。



二、 服务调用原理
    rpc：远程调用，就是一台计算机调用另一台计算机的子程序，无需额外编程.
    java rmi 二进制协议
      java序列化协议 传输对象, serializable 接口 list collection等接口为什么没有继承serializable,而实现类实现该接口,
    因为接口是无状态的,实现类是有状态的,最基本体现在 字段上,字段体现状态.

    webservice 文本协议
        xml约束:
            DTD 松散的
            XSD Schema 强制性的
    feign、spring cloud open feign
    使用场景都是客户端声明，请求不一样，请求映射不一样
    feign @RequestLine
    open feign @requestMapping 使用的spring mvc一套。

    spring cloud 利用feign的高扩展性，使用标准的spring web mvc注解来声明java接口

    spring cloud open feign 是通过java接口的方式来声明服务提供者的元信息，通过调用接口实现rest通讯。

    接口与服务提供者如何映射
    @FeignClient 注解指定名称可能用到了服务发现
    @enableFeignClients 如何感知使用@FeignClient配置类的
    feign如何序列化返回的
    eureka.instance.hostname--配置的是当前实例的host，非3eureka的host

    @EnableFeignClients 注解开启实现服务调用
    @Import(FeignClientsRegistrar.class) 需要导入

    @Import 注解 三种用用法
    1.直接导入类   2.importSelector  3.importBeanDefinitionRegister

    @configurationProperties 注解报错
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <version>2.3.3.RELEASE</version>
      <optional>true</optional>
    </dependency>

    feign的源码阅读

    注册默认配置
    注册标注@FeignClient的配置类
    registerDefaultConfiguration(metadata, registry);

    registerFeignClients(metadata, registry);

    逻辑简析
    @EnableFeignClient 得到元信息。-->标注接口定义的类 FeignClientFactoryBean 被标注接口的代理对象


    loadBalanceFeignClient 实现了服务名和地址的映射



三、 负载均衡

    核心IRule接口
    服务实例

    随机 randomRule：
    轮询 roundRobinRule：
    最小活跃数 beastAvailableRule：

    ILoadBalance没有直接注入IRule接口或者方法，他的抽象实现也没有，直到具体实现才与IRule关联。
    ILoadBalance实现类不负责具体的负载均衡策略，通过choose server来负责，导致ILoadBalance相对较少，IRule相对较多。
    DynamicServerListLoadBalancer为例
    ILoadBalance和IRule的关系是1对1的。一负载均衡策略对应一个负载均衡器
        IClientConfig clientConfig 配置
        IRule rule, IPing ping
        ServerList<T> serverList 服务实例列表
        ServerListFilter<T> filter 服务列表过滤器
            过滤不可用的服务
            灰度
            动态路由
        ServerListUpdater serverListUpdater 更新
            周期更新-30秒一次拉取注册中心服务。
            服务端推送-新增或者移除服务实例。
